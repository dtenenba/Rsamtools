* the remaining 2%
I think there are fewer than 10 remaining issues, each worth 10-50
mins... for someone intimately familiar with Rsamtools! >:D Most of
the issues are piddly silly things (see backward compatibility).

Note, on the other hand, that there isn't a single warning when
compiling with -Wall!

I prioritized addressing the Major API Changes-type issues.

* why do we need samtools if we have htslib?
We need libbam.a. htslib has about 89% of what we need; basically,
htslib enables interacting with existing BAMs, but we couldn't do
without sort and merge!

* Gotchas in adoption
** #ifdef _MAIN
samtools is for bundling / delivering binary executables!
- source files that don't have any value for us were removed
- some source files have functions we like as well as the main routine
  for a command have; main routines (and helper functions) are blocked
  out. I left those blocks in mostly for reference

** more Windows shenanigans
libregex



* Remaining issues (varied severity)
** pileup speed
Addressed; might we worth contacting MOr
** maxcnt issue (less severe)
See https://github.com/samtools/htslib/issues/243 and my two cents at
https://github.com/samtools/samtools/issues/29.

Note: samtoolsnew is built following directions at
http://www.htslib.org/download/; version at the time was samtool-1.2

I've used ERR127306_chr14.bam from the RNAseqData.HNRNPC.bam.chr14
package.

chr14, position 91233066 has, as reported by the new samtools mpileup,
a depth of 452.

Contrast:

  mpileup -r chr14:91233066-91233066 path/to/ERR127306_chr14.bam

with

  mpileup -r chr14:91233066-91233066 -d 200 path/to/ERR127306_chr14.bam

(Hint: they're identical)

# to find the position with the max depth (not that you need to):
samtoolsnew mpileup ERR127306_chr14.bam > /tmp/chr14pileup
awk 'BEGIN { max=0; ln="wut" } { if($4 > max) { max = $4; ln = $0  } } END { print max "\n" ln }' /tmp/chr14pileup

** test_BamFile.R:test_BamFile_obeyQname
I didn't get to this, and haven't worked with obeyQname before.

** test_FaFile.R: test_FaFile_emptyid
File-able bug with htslib; although no official standard, it's pretty
clear that empty descriptors are allowed ('>' followed by newline);
htslib barfs with a segfault

** test_BcfFile.R: assorted
There are a couple tests for non-standard BCFs, e.g., with missing
pieces. I don't know how to create those in the event that they simply
need to be decoded and re-encoded for the new spec.

I had success with the scanBcf function before on the ex1.bcf family
of BCF files + their index files; I think there might be a couple
off-by-one errors in the new code.

** test_TabixFile.R:
Grabbing the header of a remote tabix file. It follows that if i had
to re-encode a local tabix file, one must re-encode the remote tabix
file.
* backward compatibility for file types
** SAM / BAM
Some minor hiccups, but the stated intent of the developers is full
compatibility

** tabix
Had to re-encode example.gtf.gz.tbi to get the unit tests to pass

** fa
So simple it seems like it'd be hard to mess up, but the failing test
here is that a description line is allowed to be blank, that is, just
a solitary '>' followed by a newline.

But HTSlib chokes on that input. I think a bug should be filed.

** BCF / VCF
Must re-encode most, especially for BCF. The VCF spec has changed
somewhat, but is more forgiving; the BCF spec changes are quite
exacting. Most changes have to do with adding more header info.

This is likely why the unit tests that use intentionally incomplete
BCF files are broken.


